// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in = instruction[15], out = dABit1);
    Mux16(a = instruction, b = ALUOut, sel = instruction[15], out = ARegInput);

    Or(a = dABit1, b = instruction[5], out = dABit);
    ARegister(in = ARegInput, load = dABit, out = ARegOutput, out[0..14] = addressM);

    Mux16(a = ARegOutput, b = inM, load = instruction[12], out = Mux2Output);

    And(a = instruction[15], b = instruction[4], out = loadD); 
    //only load when is a C instruction and d2 is 1
    DRegister(in = ALUOut, load = loadD, out = DRegOutput);

    ALU(x = DRegOutput, y = Mux2Output, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = ALUOut, out = outM, zr = zrout, ng = ngout);

    And(a = instruction[3], b = instruction[15], out = writeM);
    
    Or(a = zrout, b = ngout, out = JLECond);  //<=0

    Not(in = JLECond, out = JGTCond);
    And(a = instruction[0], b = JGTCond, out = JGTOut);  //>0
    And(a = instruction[1], b = zrout, out = JEQOut);    //=0
    And(a = instruction[2], b = ngout, out = JLTOut);    //<0

    And(a = instruction[2], b = instruction[1], out = jmpout1);
    And(a = jmpout1, b = instruction[0], out = JumpOut);  


    Or(a = JEQOut, b = JGTOut, out = tmp1);
    Or(a = tmp1, b = JLTOut, out = tmp2);
    Or(a = tmp2, b = JumpOut, out = tmp3);
    
    And(a = dABit, b = tmp3, out = JMPOut);

    PC(in = ARegOutput, load = JMPOut, inc = true, reset = reset, out[0..14] = pc);






}